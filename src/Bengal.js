/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Nyilonelycompany (https://sketchfab.com/Nyilonelycompany)
license: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
source: https://sketchfab.com/3d-models/bengal-non-commercial-1d5abe57ea9549e997c78251a7da3084
title: Bengal (Non-Commercial)
*/

// import BengalScene from './assets/bengal/scene.gltf' 
// https://sketchfab.com/3d-models/bengal-non-commercial-1d5abe57ea9549e997c78251a7da3084

import * as THREE from 'three'
import React, { useRef, useEffect, useCallback } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
// import { useFrame } from '@react-three/fiber'
const gltfPath = '/bengal/scene-transformed.glb'

export default function Bengal(props) {

  const group = useRef()
  const { nodes, materials, animations } = useGLTF(gltfPath)
  
  const { actions } = useAnimations(animations, group) // ref, mixer, names, actions, clips
  // console.log('ref, mixer, names, actions, clips', ref, mixer, names, actions, clips)

  const api = { state: 'Armature.001|Armature|Shaking' }
  let interval;

  useEffect(() => {
    actions[api.state].clampWhenFinished = true
    actions[api.state].setLoop(THREE.LoopOnce)  // THREE.LoopPingPong

    interval = setInterval(onClick, 6000)
    return () => {
      clearInterval(interval)
    }
  }, [actions])

  // useFrame((state, delta) => {
  //     mixer.update(delta)
  // }, [mixer]);

  const onHover = useCallback((e, value) => {
    document.body.style.cursor = (value ? 'pointer' : 'auto')
  }, []);  

  const onClick = (e) => {
    actions[api.state]
      .reset()
      .fadeIn(0.5)
      .play()
    return;
  }

  return (
    <group 
      ref={group}
      dispose={null}
      onClick={onClick}
      onPointerOver={(e) => onHover(e, true)}
      onPointerOut={(e) => onHover(e, false)}
      scale={6}
      position={[-5, 2.2, -3]}
      rotation={[0, Math.PI / 3, 0]}
      {...props} >
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model">
          <group name="root">
            <group name="GLTF_SceneRootNode">
              <group name="Armature001_88">
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint}/>
                  <skinnedMesh castShadow name="Object_7" geometry={nodes.Object_7.geometry} material={materials.Model001_Material001} skeleton={nodes.Object_7.skeleton} />
                  <skinnedMesh castShadow name="Object_9" geometry={nodes.Object_9.geometry} material={materials.material} skeleton={nodes.Object_9.skeleton} />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(gltfPath)